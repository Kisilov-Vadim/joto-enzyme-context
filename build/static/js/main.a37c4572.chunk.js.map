{"version":3,"sources":["actions/hookActions.js","contexts/languageContext.js","contexts/successContext.js","contexts/guessedWordsContext.js","LanguagePicker.js","helpers/strings.js","Input.js","helpers/index.js","Congrats.js","GuessedWords.js","App.js","serviceWorker.js","index.js"],"names":["getSecretWord","setSecretWord","a","axios","get","response","randomNum","Math","floor","random","data","length","word","React","createContext","successContext","SuccessProvider","props","useState","success","setSuccess","value","useMemo","Provider","useSuccess","context","useContext","Error","guessedWordsContext","GuessedWordsProvider","guessedWords","setGuessedWords","useGuessedWords","LanguagePicker","setLanguage","languageIcons","code","symbol","map","lang","key","onClick","languageStrings","en","congrats","submit","guessPrompt","guessInputPlaceholder","guessColumnHeader","matchingLettersColumnHeader","emoji","getStringByLanguage","languageCode","stringKey","strings","console","warn","Input","secretWord","language","languageContext","currentGuess","setCurrentGuess","className","type","placeholder","stringsModule","onChange","event","target","evt","preventDefault","letterMatchCount","guessedWord","secretLetters","split","guessedLetterSet","Set","filter","letter","has","getLetterMatchCount","newGuessedWords","Congrats","GuessedWords","contents","guessedWordsRows","index","reducer","state","action","payload","App","useReducer","dispatch","useEffect","hookActions","role","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a37c4572.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const getSecretWord = async (setSecretWord) => {\n  const response = await axios.get('https://api.datamuse.com/words?ml=ringing+in+the+ears');\n  let randomNum = Math.floor(Math.random() * (response.data.length - 0)) + 0; \n  setSecretWord(response.data[randomNum].word);\n}\n\n// default export for mocking convenience\nexport default {\n  getSecretWord,\n}\n","import React from 'react';\n\nexport default React.createContext('en');\n","import React from 'react';\n\nconst successContext = React.createContext();\n\n\n/**\n* @function useSuccess\n* @returns {array} successContext value, which is a state of [value, setter].\n*\n*/\nfunction useSuccess() {\n  const context = React.useContext(successContext);\n\n  if(!context) {\n    throw new Error('useSuccess must be used within a SuccessProvider');\n  }\n\n  return context;\n}\n\n/**\n* @function SuccessProvider\n* @param {object} props - props to pass through from declared component\n* @returns {JSX.Element} Provider component\n*/\nfunction SuccessProvider(props) {\n    const [success, setSuccess] = React.useState(false);\n\n    const value = React.useMemo(() => [success, setSuccess], [success]);\n\n    return <successContext.Provider value={value} {...props} />\n}\n\nexport default { SuccessProvider, useSuccess }\n","import React from 'react'\n\n// no default value\nconst guessedWordsContext = React.createContext();\n\n/**\n * @function useGuessedWords\n * @returns {Array} guessedWordsContext value, which is a state of [value, setter].\n * \n */\nexport function useGuessedWords() {\n  // useContext is a hook that returns the context value\n  // In this case, the context value is an [value, setter] array for the context state\n  // useContext also subscribes to changes, and will update any time the context value updates\n  //     we've memoized this so that it will only update when the guessedWords value updates\n  const context = React.useContext(guessedWordsContext)\n\n  // throw an error if the context doesn't exist -- means we aren't in a provider\n  if (!context) {\n    throw new Error('useGuessedWords must be used within a GuessedWordsProvider')\n  }\n\n  // otherwise return the context\n  return context\n}\n\n/**\n * @function GuessedWordsProvider\n * @param {object} props - props to pass through from declared component\n * @returns {JSX.Element} Provider component \n */\nexport function GuessedWordsProvider(props) {\n  // create state that will be used within the provider\n  // initial state value is false \n  const [guessedWords, setGuessedWords] = React.useState([])\n\n  // value for the context provider will be array of [value, setter] for guessedWords state\n  // useMemo just ensures that the provider value will only update when guessedWords updates\n  // No need to test this -- React tests useMemo for us!\n  const value = React.useMemo(() => [guessedWords, setGuessedWords], [guessedWords])\n\n  // Return a Provider component with the [value, setter] array as the value, passing through the props\n  return <guessedWordsContext.Provider value={value} {...props} />\n}\n\nexport default { GuessedWordsProvider, useGuessedWords }","import React from 'react';\nimport propTypes from 'prop-types';\n\nfunction LanguagePicker({ setLanguage }) {\n  const languages = [\n    { code: 'en', symbol: '🇺🇸' },\n    { code: 'emoji', symbol: '😊' },\n  ];\n\n  const languageIcons = languages.map(lang =>\n    <span\n      data-test=\"language-icon\"\n      key={lang.code}\n      onClick={() => setLanguage(lang.code)}\n    >\n    {lang.symbol}\n    </span>\n  );\n\n  return (\n    <div data-test=\"component-language-picker\">\n      {languageIcons}\n    </div>\n  );\n}\n\nLanguagePicker.propTypes = {\n  setLanguage: propTypes.func.isRequired,\n}\n\nexport default LanguagePicker;\n","const languageStrings = {\n  en: {\n   congrats: 'Congratulations! You guessed the word!',\n   submit: 'Submit',\n   guessPrompt: 'Try to guess the secret word!',\n   guessInputPlaceholder: 'enter guess',\n   guessColumnHeader: 'Guessed Words',\n   guessedWords: 'Guesses',\n   matchingLettersColumnHeader: 'Matching Letters',\n  },\n  emoji: {\n   congrats: '🎯🎉',\n   submit: '🚀',\n   guessPrompt: '🤔🤫🔤',\n   guessInputPlaceholder: '⌨️🤔',\n   guessedWords: '🤷‍🔤',\n   guessColumnHeader: '🤷‍',\n   matchingLettersColumnHeader: '✅',\n  }\n}\n\nfunction getStringByLanguage(languageCode, stringKey, strings=languageStrings) {\n  if (!strings[languageCode] || !strings[languageCode][stringKey]) {\n    console.warn(`Could not get string [${stringKey}] for [${languageCode}]`);\n\n    // fall back to english\n    return strings.en[stringKey];\n  }\n\n  return strings[languageCode][stringKey];\n}\n\n// for future mocking\nexport default {\n  getStringByLanguage,\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport guessedWordsContext from './contexts/guessedWordsContext';\nimport successContext from './contexts/successContext';\nimport languageContext from './contexts/languageContext';\nimport stringsModule from './helpers/strings';\nimport { getLetterMatchCount } from './helpers';\n\nfunction Input({ secretWord }) {\n  const language = React.useContext(languageContext);\n  const [success, setSuccess] = successContext.useSuccess();\n  const [guessedWords, setGuessedWords] = guessedWordsContext.useGuessedWords();\n  const [ currentGuess, setCurrentGuess ] = React.useState(\"\");\n\n  if (success) { return null }\n\n  return (\n    <div data-test='component-input'>\n      <form className=\"form-inline\">\n        <input\n          data-test=\"input-box\"\n          className=\"mb-2 mx-sm-3\"\n          type=\"text\"\n          placeholder={stringsModule.getStringByLanguage(language, 'guessInputPlaceholder')}\n          value={currentGuess}\n          onChange={(event) => setCurrentGuess(event.target.value)}\n        />\n        <button\n          data-test=\"submit-button\"\n          onClick={(evt) => {\n            evt.preventDefault();\n            // update guessedWords\n            const letterMatchCount = getLetterMatchCount(currentGuess, secretWord);\n            const newGuessedWords = [...guessedWords, { guessedWord: currentGuess, letterMatchCount }];\n            setGuessedWords(newGuessedWords);\n\n            // check against secretWord and update success if needed\n            if (currentGuess === secretWord) {\n              setSuccess(true);\n            }\n            // clear input box\n            setCurrentGuess(\"\");\n          }}\n          className=\"btn btn-primary mb-2\">\n          {stringsModule.getStringByLanguage(language, 'submit')}\n        </button>\n      </form>\n    </div>\n  );\n}\n\nInput.propTypes = {\n  secretWord: PropTypes.string.isRequired,\n}\n\nexport default Input;\n","/**\n * @method getLetterMatchCount\n * @param {string} guessedWord - Guessed word.\n * @param {string} secretWord - Secret word.\n * @returns {number} - Number of letters matched between guessed word and secret word.\n */\nexport function getLetterMatchCount(guessedWord, secretWord) {\n    const secretLetters = secretWord.split('');\n    const guessedLetterSet = new Set(guessedWord);\n    return secretLetters.filter(letter => guessedLetterSet.has(letter)).length;\n};\n","import React from 'react';\n\nimport successContext from './contexts/successContext';\nimport languageContext from './contexts/languageContext';\nimport stringsModule from './helpers/strings';\n\n/**\n * Functional react component for congratulatory message.\n * @function\n * @returns {JSX.Element} - Rendered component (or null if `success` prop is false).\n */\nconst Congrats = () => {\n  const [success] = successContext.useSuccess();\n  const language = React.useContext(languageContext);\n\n  if (success) {\n    return (\n      <div data-test=\"component-congrats\" className=\"alert alert-success\">\n        <span data-test=\"congrats-message\">\n          {stringsModule.getStringByLanguage(language, 'congrats')}\n        </span>\n      </div>\n    );\n  } else {\n    return (\n      <div data-test=\"component-congrats\" />\n    );\n  }\n};\n\nexport default Congrats;\n","import React from 'react';\n\nimport guessedWordsContext from './contexts/guessedWordsContext';\nimport languageContext from './contexts/languageContext';\nimport stringsModule from './helpers/strings';\n\nconst GuessedWords = () => {\n  const [guessedWords] = guessedWordsContext.useGuessedWords();\n  const language = React.useContext(languageContext);\n  let contents\n  if (guessedWords.length === 0) {\n    contents = (\n      <span data-test=\"guess-instructions\">\n        {stringsModule.getStringByLanguage(language, 'guessPrompt')}\n      </span>\n    );\n  } else {\n    const guessedWordsRows = guessedWords.map((word, index) => (\n      <tr data-test=\"guessed-word\" key={ index }>\n        <td>{ word.guessedWord }</td>\n        <td>{ word.letterMatchCount }</td>\n      </tr>\n    ));\n    contents = (\n      <div data-test=\"guessed-words\">\n        <h3>{stringsModule.getStringByLanguage(language, 'guessedWords')}</h3>\n        <table className=\"table table-sm\">\n          <thead className=\"thead-light\">\n            <tr>\n              <th>{stringsModule.getStringByLanguage(language, 'guessColumnHeader')}</th>\n              <th>{stringsModule.getStringByLanguage(language, 'matchingLettersColumnHeader')}</th>\n            </tr>\n          </thead>\n          <tbody>\n            { guessedWordsRows }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n  return (\n    <div data-test=\"component-guessed-words\">\n      { contents }\n    </div>\n  );\n};\n\nexport default GuessedWords;\n","import React from 'react';\nimport './App.css';\nimport hookActions from './actions/hookActions';\nimport languageContext from './contexts/languageContext';\nimport successContext from './contexts/successContext';\nimport guessedWordsContext from './contexts/guessedWordsContext';\n\nimport LanguagePicker from './LanguagePicker';\nimport Input from './Input';\nimport Congrats from './Congrats';\nimport GuessedWords from './GuessedWords';\n\n/**\n * Reducer to update state, called automatically by dispatch\n * @param state {object} - existing state\n * @param action {object} - contains 'type' and 'payload' properties for the state update\n *                   for example: { type: \"setSecretWord\", payload: \"party\" }\n * @return {object} - new state\n */\nfunction reducer(state, action) {\n  switch(action.type) {\n    case \"setSecretWord\":\n      return { ...state, secretWord: action.payload };\n    case \"setLanguage\":\n      return { ...state, language: action.payload };\n    default:\n      throw new Error(`Invalid action type: ${action.type}`);\n  }\n\n}\n\nfunction App() {\n  const [state, dispatch] = React.useReducer(\n    reducer,\n    { secretWord: null, language: 'en' }\n  )\n\n  const setSecretWord = (secretWord) =>\n    dispatch({ type: \"setSecretWord\", payload: secretWord });\n  const setLanguage = (language) =>\n    dispatch({ type: \"setLanguage\", payload: language });\n\n  React.useEffect(\n    () => { hookActions.getSecretWord(setSecretWord) },\n    []\n  )\n\n  if(!state.secretWord) {\n    return (\n      <div className=\"container\" data-test=\"spinner\">\n        <div className=\"spinner-border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n        <p>Loading secret word</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container\" data-test=\"component-app\">\n      <h1>Jotto</h1>\n      <languageContext.Provider value={state.language}>\n        <LanguagePicker setLanguage={setLanguage} />\n        <guessedWordsContext.GuessedWordsProvider>\n          <successContext.SuccessProvider>\n            <Congrats />\n            <Input secretWord={state.secretWord} />\n          </successContext.SuccessProvider>\n          <GuessedWords />\n        </guessedWordsContext.GuessedWordsProvider>\n      </languageContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}