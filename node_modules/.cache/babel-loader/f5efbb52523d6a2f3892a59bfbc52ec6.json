{"ast":null,"code":"const languageStrings = {\n  en: {\n    congrats: 'Congratulations! You guessed the word!',\n    submit: 'Submit',\n    guessPrompt: 'Try to guess the secret word!',\n    guessInputPlaceholder: 'enter guess',\n    guessColumnHeader: 'Guessed Words',\n    guessedWords: 'Guesses',\n    matchingLettersColumnHeader: 'Matching Letters'\n  },\n  emoji: {\n    congrats: 'üéØüéâ',\n    submit: 'üöÄ',\n    guessPrompt: 'ü§îü§´üî§',\n    guessInputPlaceholder: '‚å®Ô∏èü§î',\n    guessedWords: 'ü§∑‚Äçüî§',\n    guessColumnHeader: 'ü§∑‚Äç',\n    matchingLettersColumnHeader: '‚úÖ'\n  }\n};\n\nfunction getStringByLanguage(languageCode, stringKey, strings = languageStrings) {\n  if (!strings[languageCode] || !strings[languageCode][stringKey]) {\n    console.warn(\"Could not get string [\".concat(stringKey, \"] for [\").concat(languageCode, \"]\")); // fall back to english\n\n    return strings.en[stringKey];\n  }\n\n  return strings[languageCode][stringKey];\n} // for future mocking\n\n\nexport default {\n  getStringByLanguage\n};","map":{"version":3,"sources":["/Users/vadimkisilov/Desktop/My Projects/Jest-Enzyme-Training/udemy-react-testing-projects/jotto-hooks-context/src/helpers/strings.js"],"names":["languageStrings","en","congrats","submit","guessPrompt","guessInputPlaceholder","guessColumnHeader","guessedWords","matchingLettersColumnHeader","emoji","getStringByLanguage","languageCode","stringKey","strings","console","warn"],"mappings":"AAAA,MAAMA,eAAe,GAAG;AACtBC,EAAAA,EAAE,EAAE;AACHC,IAAAA,QAAQ,EAAE,wCADP;AAEHC,IAAAA,MAAM,EAAE,QAFL;AAGHC,IAAAA,WAAW,EAAE,+BAHV;AAIHC,IAAAA,qBAAqB,EAAE,aAJpB;AAKHC,IAAAA,iBAAiB,EAAE,eALhB;AAMHC,IAAAA,YAAY,EAAE,SANX;AAOHC,IAAAA,2BAA2B,EAAE;AAP1B,GADkB;AAUtBC,EAAAA,KAAK,EAAE;AACNP,IAAAA,QAAQ,EAAE,MADJ;AAENC,IAAAA,MAAM,EAAE,IAFF;AAGNC,IAAAA,WAAW,EAAE,QAHP;AAINC,IAAAA,qBAAqB,EAAE,MAJjB;AAKNE,IAAAA,YAAY,EAAE,OALR;AAMND,IAAAA,iBAAiB,EAAE,KANb;AAONE,IAAAA,2BAA2B,EAAE;AAPvB;AAVe,CAAxB;;AAqBA,SAASE,mBAAT,CAA6BC,YAA7B,EAA2CC,SAA3C,EAAsDC,OAAO,GAACb,eAA9D,EAA+E;AAC7E,MAAI,CAACa,OAAO,CAACF,YAAD,CAAR,IAA0B,CAACE,OAAO,CAACF,YAAD,CAAP,CAAsBC,SAAtB,CAA/B,EAAiE;AAC/DE,IAAAA,OAAO,CAACC,IAAR,iCAAsCH,SAAtC,oBAAyDD,YAAzD,QAD+D,CAG/D;;AACA,WAAOE,OAAO,CAACZ,EAAR,CAAWW,SAAX,CAAP;AACD;;AAED,SAAOC,OAAO,CAACF,YAAD,CAAP,CAAsBC,SAAtB,CAAP;AACD,C,CAED;;;AACA,eAAe;AACbF,EAAAA;AADa,CAAf","sourcesContent":["const languageStrings = {\n  en: {\n   congrats: 'Congratulations! You guessed the word!',\n   submit: 'Submit',\n   guessPrompt: 'Try to guess the secret word!',\n   guessInputPlaceholder: 'enter guess',\n   guessColumnHeader: 'Guessed Words',\n   guessedWords: 'Guesses',\n   matchingLettersColumnHeader: 'Matching Letters',\n  },\n  emoji: {\n   congrats: 'üéØüéâ',\n   submit: 'üöÄ',\n   guessPrompt: 'ü§îü§´üî§',\n   guessInputPlaceholder: '‚å®Ô∏èü§î',\n   guessedWords: 'ü§∑‚Äçüî§',\n   guessColumnHeader: 'ü§∑‚Äç',\n   matchingLettersColumnHeader: '‚úÖ',\n  }\n}\n\nfunction getStringByLanguage(languageCode, stringKey, strings=languageStrings) {\n  if (!strings[languageCode] || !strings[languageCode][stringKey]) {\n    console.warn(`Could not get string [${stringKey}] for [${languageCode}]`);\n\n    // fall back to english\n    return strings.en[stringKey];\n  }\n\n  return strings[languageCode][stringKey];\n}\n\n// for future mocking\nexport default {\n  getStringByLanguage,\n}\n"]},"metadata":{},"sourceType":"module"}