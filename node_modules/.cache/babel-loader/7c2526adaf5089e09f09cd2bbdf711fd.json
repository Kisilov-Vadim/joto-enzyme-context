{"ast":null,"code":"import _slicedToArray from \"/Users/vadimkisilov/Desktop/My Projects/Jest-Enzyme-Training/udemy-react-testing-projects/jotto-hooks-context/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/vadimkisilov/Desktop/My Projects/Jest-Enzyme-Training/udemy-react-testing-projects/jotto-hooks-context/src/contexts/guessedWordsContext.js\";\nimport React from 'react'; // no default value\n\nconst guessedWordsContext = React.createContext();\n/**\n * @function useGuessedWords\n * @returns {Array} guessedWordsContext value, which is a state of [value, setter].\n * \n */\n\nexport function useGuessedWords() {\n  // useContext is a hook that returns the context value\n  // In this case, the context value is an [value, setter] array for the context state\n  // useContext also subscribes to changes, and will update any time the context value updates\n  //     we've memoized this so that it will only update when the guessedWords value updates\n  const context = React.useContext(guessedWordsContext); // throw an error if the context doesn't exist -- means we aren't in a provider\n\n  if (!context) {\n    throw new Error('useGuessedWords must be used within a GuessedWordsProvider');\n  } // otherwise return the context\n\n\n  return context;\n}\n/**\n * @function GuessedWordsProvider\n * @param {object} props - props to pass through from declared component\n * @returns {JSX.Element} Provider component \n */\n\nexport function GuessedWordsProvider(props) {\n  // create state that will be used within the provider\n  // initial state value is false \n  const _React$useState = React.useState([]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        guessedWords = _React$useState2[0],\n        setGuessedWords = _React$useState2[1]; // value for the context provider will be array of [value, setter] for guessedWords state\n  // useMemo just ensures that the provider value will only update when guessedWords updates\n  // No need to test this -- React tests useMemo for us!\n\n\n  const value = React.useMemo(() => [guessedWords, setGuessedWords], [guessedWords]); // Return a Provider component with the [value, setter] array as the value, passing through the props\n\n  return React.createElement(guessedWordsContext.Provider, Object.assign({\n    value: value\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }));\n}\nexport default {\n  GuessedWordsProvider,\n  useGuessedWords\n};","map":{"version":3,"sources":["/Users/vadimkisilov/Desktop/My Projects/Jest-Enzyme-Training/udemy-react-testing-projects/jotto-hooks-context/src/contexts/guessedWordsContext.js"],"names":["React","guessedWordsContext","createContext","useGuessedWords","context","useContext","Error","GuessedWordsProvider","props","useState","guessedWords","setGuessedWords","value","useMemo"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,mBAAmB,GAAGD,KAAK,CAACE,aAAN,EAA5B;AAEA;;;;;;AAKA,OAAO,SAASC,eAAT,GAA2B;AAChC;AACA;AACA;AACA;AACA,QAAMC,OAAO,GAAGJ,KAAK,CAACK,UAAN,CAAiBJ,mBAAjB,CAAhB,CALgC,CAOhC;;AACA,MAAI,CAACG,OAAL,EAAc;AACZ,UAAM,IAAIE,KAAJ,CAAU,4DAAV,CAAN;AACD,GAV+B,CAYhC;;;AACA,SAAOF,OAAP;AACD;AAED;;;;;;AAKA,OAAO,SAASG,oBAAT,CAA8BC,KAA9B,EAAqC;AAC1C;AACA;AAF0C,0BAGFR,KAAK,CAACS,QAAN,CAAe,EAAf,CAHE;AAAA;AAAA,QAGnCC,YAHmC;AAAA,QAGrBC,eAHqB,wBAK1C;AACA;AACA;;;AACA,QAAMC,KAAK,GAAGZ,KAAK,CAACa,OAAN,CAAc,MAAM,CAACH,YAAD,EAAeC,eAAf,CAApB,EAAqD,CAACD,YAAD,CAArD,CAAd,CAR0C,CAU1C;;AACA,SAAO,oBAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAEE;AAArC,KAAgDJ,KAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD;AAED,eAAe;AAAED,EAAAA,oBAAF;AAAwBJ,EAAAA;AAAxB,CAAf","sourcesContent":["import React from 'react'\n\n// no default value\nconst guessedWordsContext = React.createContext();\n\n/**\n * @function useGuessedWords\n * @returns {Array} guessedWordsContext value, which is a state of [value, setter].\n * \n */\nexport function useGuessedWords() {\n  // useContext is a hook that returns the context value\n  // In this case, the context value is an [value, setter] array for the context state\n  // useContext also subscribes to changes, and will update any time the context value updates\n  //     we've memoized this so that it will only update when the guessedWords value updates\n  const context = React.useContext(guessedWordsContext)\n\n  // throw an error if the context doesn't exist -- means we aren't in a provider\n  if (!context) {\n    throw new Error('useGuessedWords must be used within a GuessedWordsProvider')\n  }\n\n  // otherwise return the context\n  return context\n}\n\n/**\n * @function GuessedWordsProvider\n * @param {object} props - props to pass through from declared component\n * @returns {JSX.Element} Provider component \n */\nexport function GuessedWordsProvider(props) {\n  // create state that will be used within the provider\n  // initial state value is false \n  const [guessedWords, setGuessedWords] = React.useState([])\n\n  // value for the context provider will be array of [value, setter] for guessedWords state\n  // useMemo just ensures that the provider value will only update when guessedWords updates\n  // No need to test this -- React tests useMemo for us!\n  const value = React.useMemo(() => [guessedWords, setGuessedWords], [guessedWords])\n\n  // Return a Provider component with the [value, setter] array as the value, passing through the props\n  return <guessedWordsContext.Provider value={value} {...props} />\n}\n\nexport default { GuessedWordsProvider, useGuessedWords }"]},"metadata":{},"sourceType":"module"}