{"ast":null,"code":"import _slicedToArray from \"/Users/vadimkisilov/Desktop/My Projects/Jest-Enzyme-Training/udemy-react-testing-projects/jotto-hooks-context/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/vadimkisilov/Desktop/My Projects/Jest-Enzyme-Training/udemy-react-testing-projects/jotto-hooks-context/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/vadimkisilov/Desktop/My Projects/Jest-Enzyme-Training/udemy-react-testing-projects/jotto-hooks-context/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport './App.css';\nimport hookActions from './actions/hookActions';\nimport languageContext from './contexts/languageContext';\nimport successContext from './contexts/successContext';\nimport GuessedWordsContext from './contexts/guessedWordsContext';\nimport LanguagePicker from './LanguagePicker';\nimport Input from './Input';\nimport Congrats from './Congrats';\nimport GuessedWords from './GuessedWords';\n/**\n * Reducer to update state, called automatically by dispatch\n * @param state {object} - existing state\n * @param action {object} - contains 'type' and 'payload' properties for the state update\n *                   for example: { type: \"setSecretWord\", payload: \"party\" }\n * @return {object} - new state\n */\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"setSecretWord\":\n      return _objectSpread({}, state, {\n        secretWord: action.payload\n      });\n\n    case \"setLanguage\":\n      return _objectSpread({}, state, {\n        language: action.payload\n      });\n\n    default:\n      throw new Error(\"Invalid action type: \".concat(action.type));\n  }\n}\n\nfunction App() {\n  const _React$useReducer = React.useReducer(reducer, {\n    secretWord: null,\n    language: 'en'\n  }),\n        _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n        state = _React$useReducer2[0],\n        dispatch = _React$useReducer2[1];\n\n  const GuessedWordsProvider = GuessedWordsContext.GuessedWordsProvider;\n\n  const setSecretWord = secretWord => dispatch({\n    type: \"setSecretWord\",\n    payload: secretWord\n  });\n\n  const setLanguage = language => dispatch({\n    type: \"setLanguage\",\n    payload: language\n  });\n\n  React.useEffect(() => {\n    hookActions.getSecretWord(setSecretWord);\n  }, []);\n\n  if (!state.secretWord) {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      \"data-test\": \"spinner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"spinner-border\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Loading...\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Loading secret word\"));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"container\",\n    \"data-test\": \"component-app\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Jotto\"), React.createElement(languageContext.Provider, {\n    value: state.language,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(LanguagePicker, {\n    setLanguage: setLanguage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(GuessedWordsProvider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(successContext.SuccessProvider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Congrats, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(Input, {\n    secretWord: state.secretWord,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  })), React.createElement(GuessedWords, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/vadimkisilov/Desktop/My Projects/Jest-Enzyme-Training/udemy-react-testing-projects/jotto-hooks-context/src/App.js"],"names":["React","hookActions","languageContext","successContext","GuessedWordsContext","LanguagePicker","Input","Congrats","GuessedWords","reducer","state","action","type","secretWord","payload","language","Error","App","useReducer","dispatch","GuessedWordsProvider","setSecretWord","setLanguage","useEffect","getSecretWord"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport hookActions from './actions/hookActions';\nimport languageContext from './contexts/languageContext';\nimport successContext from './contexts/successContext';\nimport GuessedWordsContext from './contexts/guessedWordsContext';\n\nimport LanguagePicker from './LanguagePicker';\nimport Input from './Input';\nimport Congrats from './Congrats';\nimport GuessedWords from './GuessedWords';\n\n/**\n * Reducer to update state, called automatically by dispatch\n * @param state {object} - existing state\n * @param action {object} - contains 'type' and 'payload' properties for the state update\n *                   for example: { type: \"setSecretWord\", payload: \"party\" }\n * @return {object} - new state\n */\nfunction reducer(state, action) {\n  switch(action.type) {\n    case \"setSecretWord\":\n      return { ...state, secretWord: action.payload };\n    case \"setLanguage\":\n      return { ...state, language: action.payload };\n    default:\n      throw new Error(`Invalid action type: ${action.type}`);\n  }\n\n}\n\nfunction App() {\n  const [state, dispatch] = React.useReducer(\n    reducer,\n    { secretWord: null, language: 'en' }\n  )\n  const {GuessedWordsProvider} = GuessedWordsContext;\n\n  const setSecretWord = (secretWord) =>\n    dispatch({ type: \"setSecretWord\", payload: secretWord });\n  const setLanguage = (language) =>\n    dispatch({ type: \"setLanguage\", payload: language });\n\n  React.useEffect(\n    () => { hookActions.getSecretWord(setSecretWord) },\n    []\n  )\n\n  if(!state.secretWord) {\n    return (\n      <div className=\"container\" data-test=\"spinner\">\n        <div className=\"spinner-border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n        <p>Loading secret word</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container\" data-test=\"component-app\">\n      <h1>Jotto</h1>\n      <languageContext.Provider value={state.language}>\n        <LanguagePicker setLanguage={setLanguage} />\n        <GuessedWordsProvider>\n          <successContext.SuccessProvider>\n            <Congrats />\n            <Input secretWord={state.secretWord} />\n          </successContext.SuccessProvider>\n          <GuessedWords />\n        </GuessedWordsProvider>\n      </languageContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}