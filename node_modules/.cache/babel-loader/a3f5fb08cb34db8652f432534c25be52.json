{"ast":null,"code":"import _slicedToArray from \"/Users/vadimkisilov/Desktop/My Projects/Jest-Enzyme-Training/udemy-react-testing-projects/jotto-hooks-context/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/vadimkisilov/Desktop/My Projects/Jest-Enzyme-Training/udemy-react-testing-projects/jotto-hooks-context/src/contexts/successContext.js\";\nimport React from 'react';\nconst successContext = React.createContext();\n/**\n* @function useSuccess\n* @returns {array} successContext value, which is a state of [value, setter].\n*\n*/\n\nfunction useSuccess() {\n  const context = React.useContext(successContext);\n\n  if (!context) {\n    throw new Error('useSuccess must be used within a SuccessProvider');\n  }\n\n  return context;\n}\n/**\n* @function SuccessProvider\n* @param {object} props - props to pass through from declared component\n* @returns {JSX.Element} Provider component\n*/\n\n\nfunction SuccessProvider(props) {\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        success = _React$useState2[0],\n        setSuccess = _React$useState2[1];\n\n  const value = React.useMemo(() => [success, setSuccess], [success]);\n  return React.createElement(successContext.Provider, Object.assign({\n    value: value\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }));\n}\n\nexport default {\n  SuccessProvider,\n  useSuccess\n};","map":{"version":3,"sources":["/Users/vadimkisilov/Desktop/My Projects/Jest-Enzyme-Training/udemy-react-testing-projects/jotto-hooks-context/src/contexts/successContext.js"],"names":["React","successContext","createContext","useSuccess","context","useContext","Error","SuccessProvider","props","useState","success","setSuccess","value","useMemo"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,cAAc,GAAGD,KAAK,CAACE,aAAN,EAAvB;AAGA;;;;;;AAKA,SAASC,UAAT,GAAsB;AACpB,QAAMC,OAAO,GAAGJ,KAAK,CAACK,UAAN,CAAiBJ,cAAjB,CAAhB;;AAEA,MAAG,CAACG,OAAJ,EAAa;AACX,UAAM,IAAIE,KAAJ,CAAU,kDAAV,CAAN;AACD;;AAED,SAAOF,OAAP;AACD;AAED;;;;;;;AAKA,SAASG,eAAT,CAAyBC,KAAzB,EAAgC;AAAA,0BACER,KAAK,CAACS,QAAN,CAAe,KAAf,CADF;AAAA;AAAA,QACrBC,OADqB;AAAA,QACZC,UADY;;AAG5B,QAAMC,KAAK,GAAGZ,KAAK,CAACa,OAAN,CAAc,MAAM,CAACH,OAAD,EAAUC,UAAV,CAApB,EAA2C,CAACD,OAAD,CAA3C,CAAd;AAEA,SAAO,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEE;AAAhC,KAA2CJ,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACH;;AAED,eAAe;AAAED,EAAAA,eAAF;AAAmBJ,EAAAA;AAAnB,CAAf","sourcesContent":["import React from 'react';\n\nconst successContext = React.createContext();\n\n\n/**\n* @function useSuccess\n* @returns {array} successContext value, which is a state of [value, setter].\n*\n*/\nfunction useSuccess() {\n  const context = React.useContext(successContext);\n\n  if(!context) {\n    throw new Error('useSuccess must be used within a SuccessProvider');\n  }\n\n  return context;\n}\n\n/**\n* @function SuccessProvider\n* @param {object} props - props to pass through from declared component\n* @returns {JSX.Element} Provider component\n*/\nfunction SuccessProvider(props) {\n    const [success, setSuccess] = React.useState(false);\n\n    const value = React.useMemo(() => [success, setSuccess], [success]);\n\n    return <successContext.Provider value={value} {...props} />\n}\n\nexport default { SuccessProvider, useSuccess }\n"]},"metadata":{},"sourceType":"module"}