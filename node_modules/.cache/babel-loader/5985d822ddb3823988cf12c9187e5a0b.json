{"ast":null,"code":"import _slicedToArray from \"/Users/vadimkisilov/Desktop/My Projects/Jest-Enzyme-Training/udemy-react-testing-projects/jotto-hooks-context/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/vadimkisilov/Desktop/My Projects/Jest-Enzyme-Training/udemy-react-testing-projects/jotto-hooks-context/src/contexts/guessedWordsContext.js\";\nimport React from 'react'; // no default value\n\nconst guessedWordsContext = React.createContext();\n/**\n * @function useGuessedWords\n * @returns {Array} guessedWordsContext value, which is a state of [value, setter].\n * \n */\n\nexport function useGuessedWords() {\n  // useContext is a hook that returns the context value\n  // In this case, the context value is an [value, setter] array for the context state\n  // useContext also subscribes to changes, and will update any time the context value updates\n  //     we've memoized this so that it will only update when the guessedWords value updates\n  const context = React.useContext(guessedWordsContext); // throw an error if the context doesn't exist -- means we aren't in a provider\n\n  if (!context) {\n    throw new Error('useGuessedWords must be used within a GuessedWordsProvider');\n  } // otherwise return the context\n\n\n  return context;\n}\nexport const useGuessedWordsContext = () => {\n  return React.useContext(guessedWordsContext);\n};\n/**\n * @function GuessedWordsProvider\n * @param {object} props - props to pass through from declared component\n * @returns {JSX.Element} Provider component \n */\n\nexport function GuessedWordsProvider({\n  children\n}) {\n  const _React$useState = React.useState([]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        guessedWords = _React$useState2[0],\n        setGuessedWords = _React$useState2[1];\n\n  const value = React.useMemo(() => [guessedWords, setGuessedWords], [guessedWords]);\n  return React.createElement(guessedWordsContext.Provider, {\n    value: value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, children);\n} // export default { GuessedWordsProvider, useGuessedWords }","map":{"version":3,"sources":["/Users/vadimkisilov/Desktop/My Projects/Jest-Enzyme-Training/udemy-react-testing-projects/jotto-hooks-context/src/contexts/guessedWordsContext.js"],"names":["React","guessedWordsContext","createContext","useGuessedWords","context","useContext","Error","useGuessedWordsContext","GuessedWordsProvider","children","useState","guessedWords","setGuessedWords","value","useMemo"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,mBAAmB,GAAGD,KAAK,CAACE,aAAN,EAA5B;AAEA;;;;;;AAKA,OAAO,SAASC,eAAT,GAA2B;AAChC;AACA;AACA;AACA;AACA,QAAMC,OAAO,GAAGJ,KAAK,CAACK,UAAN,CAAiBJ,mBAAjB,CAAhB,CALgC,CAOhC;;AACA,MAAI,CAACG,OAAL,EAAc;AACZ,UAAM,IAAIE,KAAJ,CAAU,4DAAV,CAAN;AACD,GAV+B,CAYhC;;;AACA,SAAOF,OAAP;AACD;AAED,OAAO,MAAMG,sBAAsB,GAAG,MAAM;AAC1C,SAAOP,KAAK,CAACK,UAAN,CAAiBJ,mBAAjB,CAAP;AACD,CAFM;AAIP;;;;;;AAKA,OAAO,SAASO,oBAAT,CAA8B;AAACC,EAAAA;AAAD,CAA9B,EAA0C;AAAA,0BACPT,KAAK,CAACU,QAAN,CAAe,EAAf,CADO;AAAA;AAAA,QACxCC,YADwC;AAAA,QAC1BC,eAD0B;;AAG/C,QAAMC,KAAK,GAAGb,KAAK,CAACc,OAAN,CAAc,MAAM,CAACH,YAAD,EAAeC,eAAf,CAApB,EAAqD,CAACD,YAAD,CAArD,CAAd;AAGA,SACE,oBAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAEE,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,QADH,CADF;AAKD,C,CAED","sourcesContent":["import React from 'react'\n\n// no default value\nconst guessedWordsContext = React.createContext();\n\n/**\n * @function useGuessedWords\n * @returns {Array} guessedWordsContext value, which is a state of [value, setter].\n * \n */\nexport function useGuessedWords() {\n  // useContext is a hook that returns the context value\n  // In this case, the context value is an [value, setter] array for the context state\n  // useContext also subscribes to changes, and will update any time the context value updates\n  //     we've memoized this so that it will only update when the guessedWords value updates\n  const context = React.useContext(guessedWordsContext)\n\n  // throw an error if the context doesn't exist -- means we aren't in a provider\n  if (!context) {\n    throw new Error('useGuessedWords must be used within a GuessedWordsProvider')\n  }\n\n  // otherwise return the context\n  return context\n}\n\nexport const useGuessedWordsContext = () => {\n  return React.useContext(guessedWordsContext)\n}\n\n/**\n * @function GuessedWordsProvider\n * @param {object} props - props to pass through from declared component\n * @returns {JSX.Element} Provider component \n */\nexport function GuessedWordsProvider({children}) {\n  const [guessedWords, setGuessedWords] = React.useState([])\n\n  const value = React.useMemo(() => [guessedWords, setGuessedWords], [guessedWords])\n\n  \n  return (\n    <guessedWordsContext.Provider value={value}>\n      {children}\n    </guessedWordsContext.Provider>\n  )\n}\n\n// export default { GuessedWordsProvider, useGuessedWords }"]},"metadata":{},"sourceType":"module"}