{"ast":null,"code":"import _slicedToArray from \"/Users/vadimkisilov/Desktop/My Projects/Jest-Enzyme-Training/udemy-react-testing-projects/jotto-hooks-context/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/vadimkisilov/Desktop/My Projects/Jest-Enzyme-Training/udemy-react-testing-projects/jotto-hooks-context/src/Congrats.js\";\nimport React from 'react';\nimport successContext from './contexts/successContext';\nimport languageContext from './contexts/languageContext';\nimport stringsModule from './helpers/strings';\n/**\n * Functional react component for congratulatory message.\n * @function\n * @returns {JSX.Element} - Rendered component (or null if `success` prop is false).\n */\n\nconst Congrats = () => {\n  const _successContext$useSu = successContext.useSuccess(),\n        _successContext$useSu2 = _slicedToArray(_successContext$useSu, 1),\n        success = _successContext$useSu2[0];\n\n  const language = React.useContext(languageContext);\n\n  if (success) {\n    return React.createElement(\"div\", {\n      \"data-test\": \"component-congrats\",\n      className: \"alert alert-success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      \"data-test\": \"congrats-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, stringsModule.getStringByLanguage(language, 'congrats')));\n  } else {\n    return React.createElement(\"div\", {\n      \"data-test\": \"component-congrats\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    });\n  }\n};\n\nexport default Congrats;","map":{"version":3,"sources":["/Users/vadimkisilov/Desktop/My Projects/Jest-Enzyme-Training/udemy-react-testing-projects/jotto-hooks-context/src/Congrats.js"],"names":["React","successContext","languageContext","stringsModule","Congrats","useSuccess","success","language","useContext","getStringByLanguage"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,eAAP,MAA4B,4BAA5B;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AAEA;;;;;;AAKA,MAAMC,QAAQ,GAAG,MAAM;AAAA,gCACHH,cAAc,CAACI,UAAf,EADG;AAAA;AAAA,QACdC,OADc;;AAErB,QAAMC,QAAQ,GAAGP,KAAK,CAACQ,UAAN,CAAiBN,eAAjB,CAAjB;;AAEA,MAAII,OAAJ,EAAa;AACX,WACE;AAAK,mBAAU,oBAAf;AAAoC,MAAA,SAAS,EAAC,qBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,mBAAU,kBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGH,aAAa,CAACM,mBAAd,CAAkCF,QAAlC,EAA4C,UAA5C,CADH,CADF,CADF;AAOD,GARD,MAQO;AACL,WACE;AAAK,mBAAU,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;AACF,CAjBD;;AAmBA,eAAeH,QAAf","sourcesContent":["import React from 'react';\n\nimport successContext from './contexts/successContext';\nimport languageContext from './contexts/languageContext';\nimport stringsModule from './helpers/strings';\n\n/**\n * Functional react component for congratulatory message.\n * @function\n * @returns {JSX.Element} - Rendered component (or null if `success` prop is false).\n */\nconst Congrats = () => {\n  const [success] = successContext.useSuccess();\n  const language = React.useContext(languageContext);\n\n  if (success) {\n    return (\n      <div data-test=\"component-congrats\" className=\"alert alert-success\">\n        <span data-test=\"congrats-message\">\n          {stringsModule.getStringByLanguage(language, 'congrats')}\n        </span>\n      </div>\n    );\n  } else {\n    return (\n      <div data-test=\"component-congrats\" />\n    );\n  }\n};\n\nexport default Congrats;\n"]},"metadata":{},"sourceType":"module"}