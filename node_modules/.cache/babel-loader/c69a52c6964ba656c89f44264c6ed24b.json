{"ast":null,"code":"import _slicedToArray from \"/Users/vadimkisilov/Desktop/My Projects/Jest-Enzyme-Training/udemy-react-testing-projects/jotto-hooks-context/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/vadimkisilov/Desktop/My Projects/Jest-Enzyme-Training/udemy-react-testing-projects/jotto-hooks-context/src/Input.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useGuessedWordsContext } from './contexts/guessedWordsContext';\nimport successContext from './contexts/successContext';\nimport languageContext from './contexts/languageContext';\nimport stringsModule from './helpers/strings';\nimport { getLetterMatchCount } from './helpers';\n\nfunction Input({\n  secretWord\n}) {\n  const language = React.useContext(languageContext);\n\n  const _successContext$useSu = successContext.useSuccess(),\n        _successContext$useSu2 = _slicedToArray(_successContext$useSu, 2),\n        success = _successContext$useSu2[0],\n        setSuccess = _successContext$useSu2[1];\n\n  const _useGuessedWordsConte = useGuessedWordsContext(),\n        _useGuessedWordsConte2 = _slicedToArray(_useGuessedWordsConte, 2),\n        guessedWords = _useGuessedWordsConte2[0],\n        setGuessedWords = _useGuessedWordsConte2[1];\n\n  const _React$useState = React.useState(\"\"),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        currentGuess = _React$useState2[0],\n        setCurrentGuess = _React$useState2[1];\n\n  console.log(guessedWords);\n\n  if (success) {\n    return null;\n  }\n\n  return React.createElement(\"div\", {\n    \"data-test\": \"component-input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    className: \"form-inline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    \"data-test\": \"input-box\",\n    className: \"mb-2 mx-sm-3\",\n    type: \"text\",\n    placeholder: stringsModule.getStringByLanguage(language, 'guessInputPlaceholder'),\n    value: currentGuess,\n    onChange: event => setCurrentGuess(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    \"data-test\": \"submit-button\",\n    onClick: evt => {\n      evt.preventDefault(); // update guessedWords\n\n      const letterMatchCount = getLetterMatchCount(currentGuess, secretWord);\n      const newGuessedWords = [...guessedWords, {\n        guessedWord: currentGuess,\n        letterMatchCount\n      }];\n      setGuessedWords(newGuessedWords); // check against secretWord and update success if needed\n\n      if (currentGuess === secretWord) {\n        setSuccess(true);\n      } // clear input box\n\n\n      setCurrentGuess(\"\");\n    },\n    className: \"btn btn-primary mb-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, stringsModule.getStringByLanguage(language, 'submit'))));\n}\n\nInput.propTypes = {\n  secretWord: PropTypes.string.isRequired\n};\nexport default Input;","map":{"version":3,"sources":["/Users/vadimkisilov/Desktop/My Projects/Jest-Enzyme-Training/udemy-react-testing-projects/jotto-hooks-context/src/Input.js"],"names":["React","PropTypes","useGuessedWordsContext","successContext","languageContext","stringsModule","getLetterMatchCount","Input","secretWord","language","useContext","useSuccess","success","setSuccess","guessedWords","setGuessedWords","useState","currentGuess","setCurrentGuess","console","log","getStringByLanguage","event","target","value","evt","preventDefault","letterMatchCount","newGuessedWords","guessedWord","propTypes","string","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAAQC,sBAAR,QAAqC,gCAArC;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,eAAP,MAA4B,4BAA5B;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AACA,SAASC,mBAAT,QAAoC,WAApC;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAA+B;AAC7B,QAAMC,QAAQ,GAAGT,KAAK,CAACU,UAAN,CAAiBN,eAAjB,CAAjB;;AAD6B,gCAECD,cAAc,CAACQ,UAAf,EAFD;AAAA;AAAA,QAEtBC,OAFsB;AAAA,QAEbC,UAFa;;AAAA,gCAGWX,sBAAsB,EAHjC;AAAA;AAAA,QAGtBY,YAHsB;AAAA,QAGRC,eAHQ;;AAAA,0BAIaf,KAAK,CAACgB,QAAN,CAAe,EAAf,CAJb;AAAA;AAAA,QAIrBC,YAJqB;AAAA,QAIPC,eAJO;;AAM7BC,EAAAA,OAAO,CAACC,GAAR,CAAYN,YAAZ;;AAEA,MAAIF,OAAJ,EAAa;AAAE,WAAO,IAAP;AAAa;;AAE5B,SACE;AAAK,iBAAU,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,iBAAU,WADZ;AAEE,IAAA,SAAS,EAAC,cAFZ;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,WAAW,EAAEP,aAAa,CAACgB,mBAAd,CAAkCZ,QAAlC,EAA4C,uBAA5C,CAJf;AAKE,IAAA,KAAK,EAAEQ,YALT;AAME,IAAA,QAAQ,EAAGK,KAAD,IAAWJ,eAAe,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CANtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EASE;AACE,iBAAU,eADZ;AAEE,IAAA,OAAO,EAAGC,GAAD,IAAS;AAChBA,MAAAA,GAAG,CAACC,cAAJ,GADgB,CAEhB;;AACA,YAAMC,gBAAgB,GAAGrB,mBAAmB,CAACW,YAAD,EAAeT,UAAf,CAA5C;AACA,YAAMoB,eAAe,GAAG,CAAC,GAAGd,YAAJ,EAAkB;AAAEe,QAAAA,WAAW,EAAEZ,YAAf;AAA6BU,QAAAA;AAA7B,OAAlB,CAAxB;AACAZ,MAAAA,eAAe,CAACa,eAAD,CAAf,CALgB,CAOhB;;AACA,UAAIX,YAAY,KAAKT,UAArB,EAAiC;AAC/BK,QAAAA,UAAU,CAAC,IAAD,CAAV;AACD,OAVe,CAWhB;;;AACAK,MAAAA,eAAe,CAAC,EAAD,CAAf;AACD,KAfH;AAgBE,IAAA,SAAS,EAAC,sBAhBZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAiBGb,aAAa,CAACgB,mBAAd,CAAkCZ,QAAlC,EAA4C,QAA5C,CAjBH,CATF,CADF,CADF;AAiCD;;AAEDF,KAAK,CAACuB,SAAN,GAAkB;AAChBtB,EAAAA,UAAU,EAAEP,SAAS,CAAC8B,MAAV,CAAiBC;AADb,CAAlB;AAIA,eAAezB,KAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {useGuessedWordsContext} from './contexts/guessedWordsContext';\nimport successContext from './contexts/successContext';\nimport languageContext from './contexts/languageContext';\nimport stringsModule from './helpers/strings';\nimport { getLetterMatchCount } from './helpers';\n\nfunction Input({ secretWord }) {\n  const language = React.useContext(languageContext);\n  const [success, setSuccess] = successContext.useSuccess();\n  const [guessedWords, setGuessedWords] = useGuessedWordsContext();\n  const [ currentGuess, setCurrentGuess ] = React.useState(\"\");\n\n  console.log(guessedWords);\n\n  if (success) { return null }\n\n  return (\n    <div data-test='component-input'>\n      <form className=\"form-inline\">\n        <input\n          data-test=\"input-box\"\n          className=\"mb-2 mx-sm-3\"\n          type=\"text\"\n          placeholder={stringsModule.getStringByLanguage(language, 'guessInputPlaceholder')}\n          value={currentGuess}\n          onChange={(event) => setCurrentGuess(event.target.value)}\n        />\n        <button\n          data-test=\"submit-button\"\n          onClick={(evt) => {\n            evt.preventDefault();\n            // update guessedWords\n            const letterMatchCount = getLetterMatchCount(currentGuess, secretWord);\n            const newGuessedWords = [...guessedWords, { guessedWord: currentGuess, letterMatchCount }];\n            setGuessedWords(newGuessedWords);\n\n            // check against secretWord and update success if needed\n            if (currentGuess === secretWord) {\n              setSuccess(true);\n            }\n            // clear input box\n            setCurrentGuess(\"\");\n          }}\n          className=\"btn btn-primary mb-2\">\n          {stringsModule.getStringByLanguage(language, 'submit')}\n        </button>\n      </form>\n    </div>\n  );\n}\n\nInput.propTypes = {\n  secretWord: PropTypes.string.isRequired,\n}\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}